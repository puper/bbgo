// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/puper/bbgo/pkg/types (interfaces: ExchangePublic)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_exchange_public.go -package=mocks . ExchangePublic
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/puper/bbgo/pkg/types"
	gomock "go.uber.org/mock/gomock"
)

// MockExchangePublic is a mock of ExchangePublic interface.
type MockExchangePublic struct {
	ctrl     *gomock.Controller
	recorder *MockExchangePublicMockRecorder
}

// MockExchangePublicMockRecorder is the mock recorder for MockExchangePublic.
type MockExchangePublicMockRecorder struct {
	mock *MockExchangePublic
}

// NewMockExchangePublic creates a new mock instance.
func NewMockExchangePublic(ctrl *gomock.Controller) *MockExchangePublic {
	mock := &MockExchangePublic{ctrl: ctrl}
	mock.recorder = &MockExchangePublicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangePublic) EXPECT() *MockExchangePublicMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockExchangePublic) Name() types.ExchangeName {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(types.ExchangeName)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockExchangePublicMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockExchangePublic)(nil).Name))
}

// NewStream mocks base method.
func (m *MockExchangePublic) NewStream() types.Stream {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewStream")
	ret0, _ := ret[0].(types.Stream)
	return ret0
}

// NewStream indicates an expected call of NewStream.
func (mr *MockExchangePublicMockRecorder) NewStream() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStream", reflect.TypeOf((*MockExchangePublic)(nil).NewStream))
}

// PlatformFeeCurrency mocks base method.
func (m *MockExchangePublic) PlatformFeeCurrency() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlatformFeeCurrency")
	ret0, _ := ret[0].(string)
	return ret0
}

// PlatformFeeCurrency indicates an expected call of PlatformFeeCurrency.
func (mr *MockExchangePublicMockRecorder) PlatformFeeCurrency() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlatformFeeCurrency", reflect.TypeOf((*MockExchangePublic)(nil).PlatformFeeCurrency))
}

// QueryKLines mocks base method.
func (m *MockExchangePublic) QueryKLines(arg0 context.Context, arg1 string, arg2 types.Interval, arg3 types.KLineQueryOptions) ([]types.KLine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryKLines", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]types.KLine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryKLines indicates an expected call of QueryKLines.
func (mr *MockExchangePublicMockRecorder) QueryKLines(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryKLines", reflect.TypeOf((*MockExchangePublic)(nil).QueryKLines), arg0, arg1, arg2, arg3)
}

// QueryMarkets mocks base method.
func (m *MockExchangePublic) QueryMarkets(arg0 context.Context) (types.MarketMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMarkets", arg0)
	ret0, _ := ret[0].(types.MarketMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMarkets indicates an expected call of QueryMarkets.
func (mr *MockExchangePublicMockRecorder) QueryMarkets(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMarkets", reflect.TypeOf((*MockExchangePublic)(nil).QueryMarkets), arg0)
}

// QueryTicker mocks base method.
func (m *MockExchangePublic) QueryTicker(arg0 context.Context, arg1 string) (*types.Ticker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTicker", arg0, arg1)
	ret0, _ := ret[0].(*types.Ticker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTicker indicates an expected call of QueryTicker.
func (mr *MockExchangePublicMockRecorder) QueryTicker(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTicker", reflect.TypeOf((*MockExchangePublic)(nil).QueryTicker), arg0, arg1)
}

// QueryTickers mocks base method.
func (m *MockExchangePublic) QueryTickers(arg0 context.Context, arg1 ...string) (map[string]types.Ticker, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryTickers", varargs...)
	ret0, _ := ret[0].(map[string]types.Ticker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTickers indicates an expected call of QueryTickers.
func (mr *MockExchangePublicMockRecorder) QueryTickers(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTickers", reflect.TypeOf((*MockExchangePublic)(nil).QueryTickers), varargs...)
}
